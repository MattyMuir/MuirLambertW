#include <cmath>

static inline double AddEm(double x)
{
    static constexpr double emHigh = 0.36787944117144232160;
    static constexpr double emLow = -1.2428753672788363168e-17;

    return (x + emHigh) + emLow;
}

// [EM, -0.2]
static inline double Approx1(double x)
{
    static constexpr double P[] = {
        -0.999999999999999998781454,-2.218532275103755425409341,1.09193891725289689417007,5.676164924352752669529278,4.333697663393533268812102,1.069483295881317351836729,0.06209728006746276596365885
    };
    static constexpr double Q[] = {
        1,4.550176256700878418784205,7.705264281250672121011024,5.98062498820306285618724,2.106065724108968678807767,0.2831366693201161636277512,0.008433340110008441063524488
    };

    double t = sqrt(AddEm(x));

    double numer = P[6];
    for (size_t i = 0; i < 6; i++)
        numer = numer * t + P[5 - i];

    double denom = Q[6];
    for (size_t i = 0; i < 6; i++)
        denom = denom * t + Q[5 - i];

    return numer / denom;
}

// [-0.2, 0.05]
static inline double Approx2(double x)
{
    static constexpr double P[] = {
        9.4366931e-17,7.445760104e-15,0.499999999999456210080707,1.539603030034814334387079,0.94420193537918206156758,-0.7640134364614187801736004,-0.623462263583275807375907
    };
    static constexpr double Q[] = {
        1.,3.412539393445947254682879,1.942583667947436957819276,-3.727416694161742660753667,-3.362648576811831687444326,0.7772613911529353262196409,0.8364949519165993460204232
    };

    double t = x / (1 + x);

    double numer = P[6];
    for (size_t i = 0; i < 6; i++)
        numer = numer * t + P[5 - i];

    double denom = Q[6];
    for (size_t i = 0; i < 6; i++)
        denom = denom * t + Q[5 - i];

    return t * (1 + numer / denom);
}

// [0.05, 0.6]
static inline double Approx3(double x)
{
    static constexpr double P[] = {
        -2.900181973384296535936937e-13,-0.999999999971681296631431,-5.729731881096183947206466,-11.37477954337304261583094,-9.295981962577754364706446,-2.883487351785039886222201,-0.2343779582916261695283256
    };
    static constexpr double Q[] = {
        1.,7.229731879865325374815798,19.55271072826084661089386,24.55409582676480399472108,14.42892949495968738074869,3.499105961548949093145314,0.2399557388776669041427315
    };

    double numer = P[6];
    for (size_t i = 0; i < 6; i++)
        numer = numer * x + P[5 - i];

    double denom = Q[6];
    for (size_t i = 0; i < 6; i++)
        denom = denom * x + Q[5 - i];

    return x * (1 + numer / denom);
}

// [0.6, 2.4]
static inline double Approx4(double x)
{
    static constexpr double P[] = {
        -0.40039048545488761367751,-1.226277129952400740563361,0.1459224339193294667498675,3.088732245029107383283342,2.789598065921483396802071,0.8241207196672259572050549,0.07800841958460206693184302,0.001559242292925324087363634
    };
    static constexpr double Q[] = {
        1.,5.560255483059191154969113,11.02514373656186211476979,9.680390256030779087442012,3.847566503337606442536236,0.6410346239274962864621807,0.03644382816877390618803479,0.0004025963995721936398161194
    };

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * x + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * x + Q[6 - i];

    return 0.400390625 + numer / denom;
}

// [2.4, 8.75]
static inline double Approx5(double x)
{
    static constexpr double P[] = {
        -0.9382049608361020979406535,-2.152736593017690561961325,-0.9290149866957492825629398,0.2732287057323316558724251,0.1756112155550918145574186,0.02163613147538601150694792,0.000738767505259217929629807,4.910913886620275746103335e-6
    };
    static constexpr double Q[] = {
        1.,3.356966674217905929078604,3.512778711002902217008577,1.433869694356438148803596,0.2376876808976119425243665,0.01513267567586119641392004,0.0003072823276081447280509367,1.154685184462883281609154e-6
    };

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * x + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * x + Q[6 - i];

    return 0.9384765625 + numer / denom;
}

// [8.75, 35]
static inline double Approx6(double x)
{
    static constexpr double P[] = {
        -1.64152486693835484399235,-1.641642082376687039442345,-0.277054830228534442600615,0.0140892532480767565162529,0.0035425405876922056563148,0.0001268770725118221950400065,1.193292534682334049120885e-6,2.119412878194630872699851e-9
    };
    static constexpr double Q[] = {
        1.,1.545061433649215720703028,0.6077262473720878579310349,0.08213909984854676688590743,0.004165533433636254667623191,0.0000771283366229056739419923,4.406447467351178232751031e-7,4.564101690149633765346975e-10
    };

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * x + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * x + Q[6 - i];

    return 1.6611328125 + numer / denom;
}

// [35, 400]
static inline double Approx7(double x)
{
    static constexpr double P[] = {
        -1.792881327664732774125672,-17.61464238625069531482495,-9.46468505228302440381521,-0.098507032250218364378744,0.252684589808521844673978,0.0185401997044637489930649,0.000320124383079910459803588,1.00596762044525170188858e-6
    };
    static constexpr double Q[] = {
        1.,5.634133203100493766531353,5.701846569650484362210726,1.62801389384192401912878,0.1587858940217511099807044,0.005384586308983632735195283,0.00005485573193546679034405104,1.000471535629899062777137e-7
    };

    double t = sqrt(x);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 2.599609375 + numer / denom;
}

// [400, 7225]
static inline double Approx8(double x)
{
    static constexpr double P[] = {
        -5.005623424227718509862604,-1.726465528305267763227662,-0.0930465095885677277099738,0.00345136751278117870639794,0.00023925068112691758179999,3.176064297510035854535192e-6,1.150279068130744295450373e-8,7.97525056173957603661583e-12
    };
    static constexpr double Q[] = {
        1.,0.6238687213326071358573221,0.09597659788456336449777539,0.005083872187709157313884376,0.0001019391699294342050514312,7.534616420138851318126195e-7,1.734589555390420938538666e-9,7.324840574097317633321993e-13
    };

    double t = sqrt(x);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 4.4892578125 + numer / denom;
}

// [7225, 115600]
static inline double Approx9(double x)
{
    static constexpr double P[] = {
        -6.80850916801115975512343,-0.937716606754753009171354,-0.019651274882844411834533,0.000073241085858857224564555,2.58534440356849950813133e-6,1.012062876528937260891374e-8,1.012302477751943323736401e-11,1.884509485121327887975332e-15
    };
    static constexpr double Q[] = {
        1.,0.2548503903981785486641877,0.01304323120742714196353544,0.0002089306300337398523361538,1.200229358904857318594755e-6,2.456451693171267057402716e-9,1.530533070068020571046581e-12,1.722166998754853949457752e-16
    };

    double t = sqrt(x);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 6.9462890625 + numer / denom;
}

// [115600, 1960000]
static inline double Approx10(double x)
{
    static constexpr double P[] = {
        -7.612093884341071008010845,-0.274802792714947248733489,-0.00145745680927150862083744,1.35999973363915456373421e-6,1.19196933211232836882692e-8,1.155229958994611342409266e-11,2.8532804068730851773796e-15,1.308453166623186115267132e-19
    };
    static constexpr double Q[] = {
        1.,0.07003385475422981402026354,0.0009228901402300251218971713,3.730855899369000609795312e-6,5.359968694684899993961814e-9,2.729613387105260895868582e-12,4.218623564427737659800048e-16,1.175343889812314173725193e-20
    };

    double t = sqrt(x);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 9.4150390625 + numer / denom;
}

// [1960000, 33640000]
static inline double Approx11(double x)
{
    static constexpr double P[] = {
        -8.027947460271808480269167,-0.0712181706141578815996098,-0.000092002807890987479538579,2.0851384228527376946667e-8,4.43163923372767059192999e-11,1.040659663685645368914985e-14,6.22354864600744979061285e-19,6.90567068355775459798299e-24
    };
    static constexpr double Q[] = {
        1.,0.01756139045708885178643158,0.00005678555412565004401422836,5.598424227113294734502591e-8,1.956262231361565891562691e-11,2.419677496364215364069321e-15,9.075611079244018685539657e-20,6.135139434681698755303782e-25
    };

    double t = sqrt(x);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 12.0029296875 + numer / denom;
}

// [33640000, 9.23521e9]
static inline double Approx12(double x)
{
    static constexpr double P[] = {
        -15.50055964374823769530649,-2.420893458148783557578709,-0.0566628647367364117443757,0.000238807107962635966830658,9.26115130418997379352317e-6,4.01468885455885266642288e-8,4.44337494848698153464923e-11,9.14028786545818061734288e-15
    };
    static constexpr double Q[] = {
        1.,0.2999851020641417674026666,0.01744233102332113201558165,0.0003139199417491507601571529,2.016049367263732225084389e-6,4.600385664939387051536664e-9,3.191220469244897337264704e-12,3.99793625517002194788961e-16
    };

    double t = sqrt(sqrt(x));

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 14.646484375 + numer / denom;
}

// [9.23521e9, 2.44140625e12]
static inline double Approx13(double x)
{
    static constexpr double P[] = {
        -16.6543251446907511431225,-0.673777791452677292176093,-0.00400615525928842041492823,3.8412118952134533154306e-6,3.94047525626276008053398e-8,4.2588010692008930962885e-11,1.1698304080437680507088e-14,5.96201049583554444271529e-19
    };
    static constexpr double Q[] = {
        1.,0.07996665460331137430562438,0.001181962841632339864080331,5.334112963786734548155252e-6,8.540433949675669987681663e-9,4.844540266159455287139628e-12,8.341111224188698552948144e-16,2.59187860235819850129702e-20
    };

    double t = sqrt(sqrt(x));

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 19.9521484375 + numer / denom;
}

// [2.44140625e12, 7.311616e14]
static inline double Approx14(double x)
{
    static constexpr double P[] = {
        -17.08717900625496780328542,-0.170172650825117634567968,-0.000246059452311580764302967,6.2730256938367054131075e-8,1.48566123581141385365891e-10,3.89889266861631145632736e-14,2.60550166341423436494876e-18,3.22928946897745751575037e-23
    };
    static constexpr double Q[] = {
        1.,0.01996879764262996326044679,0.00007270781068129094247631908,8.048692065912235468474023e-8,3.153987054731780815383205e-11,4.372152265710897587626233e-15,1.83751734812196280408344e-19,1.392592800257216064476979e-24
    };

    double t = sqrt(sqrt(x));

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return 25.29296875 + numer / denom;
}

// [7.311616e14, 6.3274317072e60]
static inline double Approx15(double x)
{
    static constexpr double P[] = {
        4.173226743794642980309108,0.556081152230557075753878,0.0057211519409463762157667,-0.00045463773702005924910736,-7.538531075757552586947e-6,-2.8625909315262385577113e-8,-2.311288677145315375498e-11,-7.55732012473767423565e-16
    };
    static constexpr double Q[] = {
        1.,0.3338179993203285580332386,0.02324399277535839409146594,0.0005053808269477174175181612,3.742668265816787003951427e-6,8.693741868247352346132074e-9,4.444913170341505436176766e-12
    };

    double t = log(x);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[6];
    for (size_t i = 0; i < 6; i++)
        denom = denom * t + Q[5 - i];

    return t + (numer / denom - 3.4267578125);
}

// [6.3274317072e60, DBL_MAX]
static inline double Approx16(double x)
{
    static constexpr double P[] = {
        4.984335584141824499786139,0.383807765940648368142213,0.0040396170382835321635785,-0.00001560889935497295040548,-1.9442455657473621298553e-7,-3.611990356124552951345e-10,-1.538328997382781360659e-13,-4.42613513146338032814e-18,2.04228779617686385029755e-22
    };
    static constexpr double Q[] = {
        1.,0.17112627802379038785315,0.005107633341093007104504296,0.00004524161382971658428892032,1.375069189749072959493486e-7,1.393092578043575886349507e-10,3.589901255489571830345609e-14,-2.04228779617686385029755e-22
    };

    double t = log(x);

    double numer = P[8];
    for (size_t i = 0; i < 8; i++)
        numer = numer * t + P[7 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return t + (numer / denom - 4.9052734375);
}

double MuirW0v2(double x)
{
    if (x < 7225)
    {
        if (x < 2.4)
        {
            if (x < 0.05)
            {
                if (x < -0.2) return Approx1(x);
                return Approx2(x);
            }
            if (x < 0.6) return Approx3(x);
            return Approx4(x);
        }

        if (x < 35)
        {
            if (x < 8.75) return Approx5(x);
            return Approx6(x);
        }

        if (x < 400) return Approx7(x);
        return Approx8(x);
    }

    if (x < 9.23521e9)
    {
        if (x < 1960000)
        {
            if (x < 115600) return Approx9(x);
            return Approx10(x);
        }
        if (x < 33640000) return Approx11(x);
        return Approx12(x);
    }

    if (x < 7.311616e14)
    {
        if (x < 2.44140625e12) return Approx13(x);
        return Approx14(x);
    }

    if (x < 6.3274317072e60) return Approx15(x);
    return Approx16(x);
}