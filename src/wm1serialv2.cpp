#include <cmath>

static inline double AddEm(double x)
{
    static constexpr double emHigh = 0.36787944117144232160;
    static constexpr double emLow = -1.2428753672788363168e-17;

    return (x + emHigh) + emLow;
}

// [EM, -0.305379441171]
static inline double Approx1(double x)
{
    static constexpr double P[] = {
        -1.000000000000000117134784,-2.33164398159685170630676,-1.812187885744243810680737,-1.936631098573478345021083,-2.353552468784865720465171,-3.066797973739417797947489,-4.177259222912836807794079,-5.816016969629611497190643,-9.057103163371400525594017,-4.770080514141823675151571,-81.0170590220687347689688,363.6016921898574609394888,-1813.720843669996210068021,5681.58868756056320348405,-12755.27495650076645935367,17089.42646514421377843608,-11510.93153211817108581574
    };

    double t = sqrt(AddEm(x));

    double numer = P[16];
    for (size_t i = 0; i < 16; i++)
        numer = numer * t + P[15 - i];

    return numer;
}

// [-0.305379441171, -0.113193674207]
static inline double Approx2(double x)
{
    static constexpr double P[] = {
        -0.000010734819216577826,26.61566653407099066522,3.83391445655394517906,35.67325493805992120294,11.52926315478921563064,25.87677284578472497225,14.08339687823503916362,10.443069925739341646338,1.931466847227484541108
    };
    static constexpr double Q[] = {
        45.435391665493322051358,58.257508248597299778557,105.84690154955386745713,85.88871892688878787036,67.711064315991617028596,30.214412678384329748915,9.767185415072519102306,1.
    };

    double t = sqrt(-1.0 - 1.0 / (x * 2.718281828459045));

    double numer = P[8];
    for (size_t i = 0; i < 8; i++)
        numer = numer * t + P[7 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 1 - t * 2;
}

// [-0.113193674207, -0.0117721421175]
static inline double Approx3(double x)
{
    static constexpr double P[] = {
        1152.7313694732868688148,1551.970494032401957009,703.890712386578241406,-221.5613809436711839206,-1616.613189347856264088,-740.8747094028744255508,191.647169648465484126,40.51069756628242074966,0.9858173582493203296276
    };
    static constexpr double Q[] = {
        1545.5639166336381628861,2857.6134537907949010802,4111.9414646525830537454,3524.2301970456441109086,2140.5544005517425714553,597.71658011324256946159,52.398299450485017958258,1.
    };

    double t = sqrt(-1.0 - 1.0 / (x * 2.718281828459045));

    double numer = P[8];
    for (size_t i = 0; i < 8; i++)
        numer = numer * t + P[7 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 1.75 - t;
}

// [-0.0117721421175, -0.000964929681761]
static inline double Approx4(double x)
{
    static constexpr double P[] = {
        4.9034482917692463788775,8.2360197499262769690049,5.4503799246620383620368,0.19679925377666422026046,-0.17780679754781934079601,-0.015312794800207539023846,-0.00029433833155312954824731,-1.0030999087510389683048e-6
    };
    static constexpr double Q[] = {
        1.,1.635180825114231395243289,1.784374659920596441586515,0.665173571988182167002435,0.08059699133899091947707724,0.003244964434865942922638557,0.00003815145273992986776716743,7.927222586593495400847293e-8
    };

    double t = sqrt(-1.0 - 1.0 / (x * 2.718281828459045));

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 6.2783203125;
}

// [-0.000964929681761, -0.000046437697699]
static inline double Approx5(double x)
{
    static constexpr double P[] = {
        9.29725621506182189505934,3.52718195189158940766194,0.196868302538467803784631,-0.0076018723841510899104038,-0.000524346244052250685243435,-6.9207511812382895782598e-6,-2.47763417458944324444064e-8,-1.685835172431572553750835e-11
    };
    static constexpr double Q[] = {
        1.,0.8282923821450421368482604,0.1438373811161717574589249,0.008134609930286514746773516,0.0001696367590474213522657794,1.285385218379631452914879e-6,3.009696848327716606558194e-9,1.291043665302799036180277e-12
    };

    double t = sqrt(-1.0 - 1.0 / (x * 2.718281828459045));

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 9.1572265625;
}

// [-0.000046437697699, -2.748139663e-7]
static inline double Approx6(double x)
{
    static constexpr double P[] = {
        16.56346654959733399471221,-26.3742413683715722938053,-12.70883564467100520141442,-0.2111152378128837246393,0.132054125022128225082557,0.00625552429127631303939589,0.000067348567259211998485879,1.297217269519108510027129e-7
    };
    static constexpr double Q[] = {
        1.,-1.163538573758388494529992,-1.96856100427884481149968,-0.4503910659559603249012799,-0.03067865156526613256006736,-0.0006900625862431601507749987,-4.55155206972614170148817e-6,-5.325372369984232045814171e-9
    };

    double t = sqrt(1.0 / sqrt(x * -2.718281828459045) - 1.0);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 12.5029296875;
}

// [-2.748139663e-7, -9.5752266068e-10]
static inline double Approx7(double x)
{
    static constexpr double P[] = {
        18.68482660121364578400734,5.82492033358522806079225,0.280165837579945197286623,-0.0031665674213236842303438,-0.000231684111799996526228913,-2.16637900984023616979044e-6,-5.23332288184013541805826e-9,-2.358441659405664310905124e-12
    };
    static constexpr double Q[] = {
        1.,0.6390707580918569214223053,0.08014012691041014622880289,0.003145088103299463227948885,0.00004434693486176430996977107,2.231877742555749573357384e-7,3.426601357846631232737538e-10,9.541057091266047000045486e-14
    };

    double t = sqrt(1.0 / sqrt(x * -2.718281828459045) - 1.0);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 17.9970703125;
}

// [-9.5752266068e-10, -3.2508053202e-12]
static inline double Approx8(double x)
{
    static constexpr double P[] = {
        19.46852890300271917922465,1.742309791411623601594431,0.0226164876048217286558131,-0.000050767954947429792045557,-1.08888469084483730206029e-6,-2.56072149529388748219625e-9,-1.532220421442481994808403e-12,-1.69932306485547645018693e-16
    };
    static constexpr double Q[] = {
        1.,0.1848782306847730335899332,0.006105357481941735392125913,0.00006098013638682454840780669,2.151702511090500424750095e-7,2.683655183954024575971512e-10,1.014751011517915841922134e-13,6.928286437390296460540006e-18
    };

    double t = sqrt(1.0 / sqrt(x * -2.718281828459045) - 1.0);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 23.94140625;
}

// [-3.2508053202e-12, -1.0210359555e-14]
static inline double Approx9(double x)
{
    static constexpr double P[] = {
        19.08763657394357713363773,0.409775780548764083664444,0.00126729280376344853821077,-7.1713119752896446762429e-7,-3.55117858852766678304297e-9,-1.98900384722425425458801e-12,-2.83824721720507365399691e-16,-7.50648899449103994750827e-21
    };
    static constexpr double Q[] = {
        1.,0.04413319684433055837112854,0.0003484430620294396189735113,8.318183009064696363336115e-7,7.011821069144168924063086e-10,2.08811437574896183199476e-13,1.884185543109417771920167e-17,3.067889007643678967875868e-22
    };

    double t = sqrt(1.0 / sqrt(x * -2.718281828459045) - 1.0);

    double numer = P[7];
    for (size_t i = 0; i < 7; i++)
        numer = numer * t + P[6 - i];

    double denom = Q[7];
    for (size_t i = 0; i < 7; i++)
        denom = denom * t + Q[6 - i];

    return numer / denom - 29.84765625;
}

// [-1.0210359555e-14, 0]
static inline double Approx10(double x)
{
    static constexpr double P[] = {
        35100.928817469924,201530.00266928149,-118043.53637190413,-153652.150316279168,-25311.189398132189,-1103.76053623626168,-11.6798908541501338,-0.0069555896279290393,8.8961736198104841e-6
    };
    static constexpr double Q[] = {
        -82070.30298309479112412,54830.793317475969832634,129704.36194776543903291,44185.921752932815577021,4379.478151960028465375,134.04114553155266614658,1.
    };

    double lx = -log(-x);
    double t = sqrt(lx);

    double numer = P[8];
    for (size_t i = 0; i < 8; i++)
        numer = numer * t + P[7 - i];

    double denom = Q[6];
    for (size_t i = 0; i < 6; i++)
        denom = denom * t + Q[5 - i];

    return numer / denom - lx;
}

double MuirWm1v2(double x)
{
    if (x < -0.000964929681761)
    {
        if (x < -0.113193674207)
        {
            if (x < -0.305379441171) return Approx1(x);
            return Approx2(x);
        }
        if (x < -0.0117721421175) return Approx3(x);
        return Approx4(x);
    }
    if (x < -9.5752266068e-10)
    {
        if (x < -0.000046437697699) return Approx5(x);
        if (x < -2.748139663e-7) return Approx6(x);
        return Approx7(x);
    }
    if (x < -3.2508053202e-12) return Approx8(x);
    if (x < -1.0210359555e-14) return Approx9(x);
    return Approx10(x);
}